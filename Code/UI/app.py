# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from pathlib import Path
from Code.show_data import showData
from Code.data import CustomDataset
from Code.mask import Segmentation
from Code.normalize import Normalize
from Code.pyRadiomics import Radiomics
from Code.ROI import ROI
from PIL import ImageOps, Image
import cv2
import numpy as np

class Ui_MainWindow(object):

    def __init__(self):
        super().__init__()

        self.filePath = ''
        self.folderPath = ''
        self.currentDir = os.getcwd()
        self.images = []
        self.images_names = []
        self.images_paths = []
        self.folders_paths = []
        self.masks = []
        self.mask_path = []
        self.mask_folder = []
        self.newMasks = []
        self.newMaksNumber = []
        self.emptyMasks = []
        self.newMaskFolder = []
        self.normImages = []
        self.roiImages = []
        self.roiMasks = []

    def setupUi(self, MainWindow):
        self.window = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(938, 633)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setEnabled(True)
        self.frame.setGeometry(QtCore.QRect(10, 20, 921, 381))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.noNormaButton = QtWidgets.QRadioButton(self.frame)
        self.noNormaButton.setGeometry(QtCore.QRect(20, 250, 141, 20))
        self.noNormaButton.setObjectName("noNormaButton")
        self.minMaxButton = QtWidgets.QRadioButton(self.frame)
        self.minMaxButton.setGeometry(QtCore.QRect(20, 280, 171, 20))
        self.minMaxButton.setObjectName("minMaxButton")
        self.meanStdButton = QtWidgets.QRadioButton(self.frame)
        self.meanStdButton.setGeometry(QtCore.QRect(20, 310, 181, 20))
        self.meanStdButton.setObjectName("meanStdButton")
        self.perButton = QtWidgets.QRadioButton(self.frame)
        self.perButton.setGeometry(QtCore.QRect(20, 340, 161, 20))
        self.perButton.setObjectName("perButton")
        self.widget = QtWidgets.QWidget(self.frame)
        self.widget.setGeometry(QtCore.QRect(0, 0, 921, 381))
        self.widget.setStyleSheet("background-color: rgb(186, 188, 162);")
        self.widget.setObjectName("widget")
        self.widget_5 = QtWidgets.QWidget(self.widget)
        self.widget_5.setGeometry(QtCore.QRect(10, 30, 301, 151))
        self.widget_5.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.widget_5.setObjectName("widget_5")
        self.label_5 = QtWidgets.QLabel(self.widget_5)
        self.label_5.setGeometry(QtCore.QRect(80, 0, 121, 31))
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.bothButton = QtWidgets.QRadioButton(self.widget_5)
        self.bothButton.setGeometry(QtCore.QRect(10, 120, 141, 20))
        self.bothButton.setObjectName("bothButton")
        self.label_6 = QtWidgets.QLabel(self.widget_5)
        self.label_6.setGeometry(QtCore.QRect(10, 40, 171, 31))
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.area2Button = QtWidgets.QRadioButton(self.widget_5)
        self.area2Button.setGeometry(QtCore.QRect(10, 100, 141, 20))
        self.area2Button.setObjectName("area2Button")
        self.area1Button = QtWidgets.QRadioButton(self.widget_5)
        self.area1Button.setGeometry(QtCore.QRect(10, 80, 161, 20))
        self.area1Button.setObjectName("area1Button")
        self.widget_6 = QtWidgets.QWidget(self.widget)
        self.widget_6.setGeometry(QtCore.QRect(10, 200, 301, 171))
        self.widget_6.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.widget_6.setObjectName("widget_6")
        self.label = QtWidgets.QLabel(self.widget_6)
        self.label.setGeometry(QtCore.QRect(80, 0, 121, 31))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.generateSegButton = QtWidgets.QPushButton(self.widget)
        self.generateSegButton.setGeometry(QtCore.QRect(370, 50, 150, 50))
        self.generateSegButton.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.generateSegButton.setObjectName("generateSegButton")
        self.generateNormButton = QtWidgets.QPushButton(self.widget)
        self.generateNormButton.setGeometry(QtCore.QRect(370, 320, 150, 50))
        self.generateNormButton.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.generateNormButton.setObjectName("generateNormButton")
        self.roiButton = QtWidgets.QPushButton(self.widget)
        self.roiButton.setGeometry(QtCore.QRect(370, 110, 150, 50))
        self.roiButton.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.roiButton.setObjectName("roiButton")
        self.statusMaskLabel = QtWidgets.QLabel(self.widget)
        self.statusMaskLabel.setGeometry(QtCore.QRect(530, 60, 231, 31))
        self.statusMaskLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.statusMaskLabel.setStyleSheet("")
        self.statusMaskLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.statusMaskLabel.setText("")
        self.statusMaskLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.statusMaskLabel.setObjectName("statusMaskLabel")
        self.statusROILabel = QtWidgets.QLabel(self.widget)
        self.statusROILabel.setGeometry(QtCore.QRect(530, 120, 231, 31))
        self.statusROILabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.statusROILabel.setStyleSheet("")
        self.statusROILabel.setFrameShape(QtWidgets.QFrame.Box)
        self.statusROILabel.setText("")
        self.statusROILabel.setAlignment(QtCore.Qt.AlignCenter)
        self.statusROILabel.setObjectName("statusROILabel")
        self.statusNormLabel = QtWidgets.QLabel(self.widget)
        self.statusNormLabel.setGeometry(QtCore.QRect(530, 330, 131, 31))
        self.statusNormLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.statusNormLabel.setStyleSheet("")
        self.statusNormLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.statusNormLabel.setText("")
        self.statusNormLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.statusNormLabel.setObjectName("statusNormLabel")
        self.showButton = QtWidgets.QPushButton(self.widget)
        self.showButton.setGeometry(QtCore.QRect(750, 300, 150, 50))
        self.showButton.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.showButton.setObjectName("showButton")
        self.widget_6.raise_()
        self.widget_5.raise_()
        self.generateSegButton.raise_()
        self.generateNormButton.raise_()
        self.roiButton.raise_()
        self.statusMaskLabel.raise_()
        self.statusROILabel.raise_()
        self.statusNormLabel.raise_()
        self.showButton.raise_()
        self.widget.raise_()
        self.noNormaButton.raise_()
        self.minMaxButton.raise_()
        self.meanStdButton.raise_()
        self.perButton.raise_()
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(10, 420, 561, 201))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.loadDataButton = QtWidgets.QPushButton(self.frame_2)
        self.loadDataButton.setGeometry(QtCore.QRect(40, 110, 150, 50))
        self.loadDataButton.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.loadDataButton.setObjectName("loadDataButton")
        self.button3D = QtWidgets.QCheckBox(self.frame_2)
        self.button3D.setGeometry(QtCore.QRect(50, 170, 131, 21))
        self.button3D.setObjectName("button3D")
        self.LoadFolderButton = QtWidgets.QPushButton(self.frame_2)
        self.LoadFolderButton.setGeometry(QtCore.QRect(40, 50, 150, 50))
        self.LoadFolderButton.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.LoadFolderButton.setObjectName("LoadFolderButton")
        self.widget_4 = QtWidgets.QWidget(self.frame_2)
        self.widget_4.setGeometry(QtCore.QRect(0, 0, 561, 201))
        self.widget_4.setStyleSheet("background-color: rgb(186, 188, 162);")
        self.widget_4.setObjectName("widget_4")
        self.label_3 = QtWidgets.QLabel(self.widget_4)
        self.label_3.setGeometry(QtCore.QRect(210, 10, 121, 31))
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.loadMaskButton = QtWidgets.QPushButton(self.widget_4)
        self.loadMaskButton.setGeometry(QtCore.QRect(360, 50, 150, 50))
        self.loadMaskButton.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.loadMaskButton.setObjectName("loadMaskButton")
        self.loadMaskFolderButton = QtWidgets.QPushButton(self.widget_4)
        self.loadMaskFolderButton.setGeometry(QtCore.QRect(360, 110, 150, 50))
        self.loadMaskFolderButton.setStyleSheet("background-color: rgb(210, 204, 204);")
        self.loadMaskFolderButton.setObjectName("loadMaskFolderButton")
        self.widget_4.raise_()
        self.loadDataButton.raise_()
        self.button3D.raise_()
        self.LoadFolderButton.raise_()
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(0, 0, 961, 641))
        self.widget_2.setStyleSheet("background-color: rgb(81, 93, 78);")
        self.widget_2.setObjectName("widget_2")
        self.csvButton = QtWidgets.QPushButton(self.widget_2)
        self.csvButton.setGeometry(QtCore.QRect(770, 550, 150, 50))
        self.csvButton.setStyleSheet("background-color: rgb(210, 204, 204);\n"
"")
        self.csvButton.setObjectName("csvButton")
        self.csvStatusLabel = QtWidgets.QLabel(self.widget_2)
        self.csvStatusLabel.setGeometry(QtCore.QRect(610, 560, 151, 31))
        self.csvStatusLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.csvStatusLabel.setStyleSheet("background-color: rgb(186, 188, 162);")
        self.csvStatusLabel.setFrameShape(QtWidgets.QFrame.Box)
        self.csvStatusLabel.setText("")
        self.csvStatusLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.csvStatusLabel.setObjectName("csvStatusLabel")
        self.widget_2.raise_()
        self.frame.raise_()
        self.frame_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.loadDataButton.clicked.connect(lambda: self.getFile())
        self.LoadFolderButton.clicked.connect(lambda: self.getFolder())
        self.showButton.clicked.connect(lambda: self.showImages())
        self.loadMaskButton.clicked.connect(lambda: self.getMask())
        self.loadMaskFolderButton.clicked.connect(lambda: self.getMaskFolder())
        self.generateSegButton.clicked.connect(lambda: self.chooseSegmentation())
        self.roiButton.clicked.connect(lambda: self.getROI())
        self.generateNormButton.clicked.connect(lambda: self.chooseNormalization())
        self.csvButton.clicked.connect(lambda: self.radiomics())

    def getFile(self):
        # Open window to choose file
        self.filePath, _ = QFileDialog.getOpenFileNames(self.window, 'Choose an image', "${HOME}", "Formats: (*.png )")

        for filePath in self.filePath:
            image = cv2.imread(filePath, cv2.IMREAD_UNCHANGED)
            #name = os.path.basename(filePath)
            # img_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            self.images.append((image, filePath))

            print(f"Image: {len(self.images)}")

    def getFolder(self):
        # Open window to choose file
        self.folderPath = QFileDialog.getExistingDirectory(self.window, 'Choose a patient Directory', "${HOME}")

        if self.folderPath:
            for root, dirs, files in os.walk(self.folderPath):
                for fileName in files:
                    if fileName.lower().endswith(('.png')):
                        filePath = os.path.join(root, fileName)
                        image = cv2.imread(filePath, cv2.IMREAD_UNCHANGED)
                        self.images.append((image, filePath))
                        print(f"Image: {len(self.images)}")
        else:
            print("Empty directory")

    def getMask(self):
        # Open window to choose file
        self.filePath, _ = QFileDialog.getOpenFileNames(self.window, 'Choose an image', "${HOME}", "Formats: (*.png )")

        for filePath in self.filePath:
            mask = cv2.imread(filePath, cv2.IMREAD_UNCHANGED)
            self.masks.append(mask)
            self.mask_path.append(filePath)
            print(f"Masks: {len(self.masks)}")

    def getMaskFolder(self):
        # Open window to choose file
        self.folderPath = QFileDialog.getExistingDirectory(self.window, 'Choose a patient Directory', "${HOME}")

        if self.folderPath:

            for root, dirs, files in os.walk(self.folderPath):
                for fileName in files:
                    if fileName.lower().endswith(('.png')):
                        filePath = os.path.join(root, fileName)
                        maskF = cv2.imread(filePath, cv2.IMREAD_UNCHANGED)
                        #nameFolder = os.path.basename(self.folderPath)
                        self.masks.append(maskF)
                        self.mask_path.append(filePath)
                        print(f"Masks Folder: {len(self.masks)}")
        else:
            print("Empty directory")

    def showImages(self):
        if self.images:
            print("Number of images:", len(self.images))
            # e[0] - images, e[1] - images_paths
            showData([e[0] for e in self.images], [e[1] for e in self.images])
        else:
            print("No files selected.")

    def chooseSegmentation(self):
        segmentation = Segmentation()
        message = ""
        empty_masks = []
        if self.area1Button.isChecked():
            new_mask_sitk = segmentation.segmentationMask(self.masks, [1])
            self.newMasks.extend(new_mask_sitk)
            empty_masks.extend(empty_masks)
            message = "Sucessful! New mask/masks created"
            print(f"New Masks: {len(self.newMasks)}")
            #print(f"Empty Masks: {len(empty_masks)}")
        elif self.area2Button.isChecked():
            new_mask_sitk = segmentation.segmentationMask(self.masks, [2])
            self.newMasks.extend(new_mask_sitk)
            message = "Sucessful! New mask/masks created"
        elif self.bothButton.isChecked():
            new_mask_sitk = segmentation.segmentationMask(self.masks, [1, 2])
            self.newMasks.extend(new_mask_sitk)
            message = "Sucessful! New mask/masks created"
        self.statusMaskLabel.setText(message)

    def getROI(self):
        roi = ROI()
        empty_masks = []
        empty_masks_images = []
        messageROI = ""
        for (image, image_path), mask in zip(self.images, self.newMasks):
            if np.all(mask == 0):
                empty_masks.append(mask)
                empty_masks_images.append(image_path)
                #print(f" {mask}")
                print(f"{image_path}")
            else:
                roiImg, roiMask = roi.roiImage(image, mask)
                self.roiImages.append((roiImg, image_path, roiMask))
                #self.roiMasks.append(roiMask)
                messageROI = "Sucessful! ROI created"
                self.statusROILabel.setText(messageROI)
                #print(f"Image shape: {roiImg.shape}")
                #print(f"Mask shape: {roiMask.shape}")

                #print(f"self.roiImage: {self.roiImages}")
                #print(f"self.roiMask: {self.roiMasks}")

                #print(f"ROI Mask: {len(self.roiMasks)}")
                #print(f"ROI Images: {len(self.roiImages)}")


    def chooseNormalization(self):
        normalization = Normalize()
        if self.minMaxButton.isChecked():
            new_image = normalization.minMaxNormalization(self.roiImages, self.roiMasks)
            self.normImages.extend(new_image)
        elif self.area2Button.isChecked():
            new_mask_sitk = segmentation.area2Mask(self.masks)
        elif self.bothButton.isChecked():
            new_mask_sitk = segmentation.bothMask(self.masks)
            #self.newMask.extend(new_mask_sitk)

    def radiomics(self):
        radiomics = Radiomics()
        messageRadiomic = ""
        if self.noNormaButton.isChecked():
            print("self.noNormaButton.isChecked():")
            radiomics.extractRadiomics(self.roiImages)
            messageRadiomic = "CSV files created "
        else:
            radiomics.extractRadiomics(self.normImage)
            messageRadiomic = "CSV files created "
        self.csvStatusLabel.setText(messageRadiomic)

    """
    def extractRadiomics(self):
        radiomics = Radiomics()
        if self.images:
            radiomics.extractRadiomics(self.images, self.masks, self.image_name, self.image_path)
        elif self.image_folder:
            radiomics.extractRadiomics(self.image_folder, self.mask_folder, self.image_name, self.folder_path)
    """

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Textural analysis"))
        self.noNormaButton.setText(_translate("MainWindow", "No normalization"))
        self.minMaxButton.setText(_translate("MainWindow", "Min-Max normalization"))
        self.meanStdButton.setText(_translate("MainWindow", "Mean/Std normalization"))
        self.perButton.setText(_translate("MainWindow", "Percentile normalization"))
        self.label_5.setText(_translate("MainWindow", "Segmentation"))
        self.bothButton.setText(_translate("MainWindow", "Both"))
        self.label_6.setText(_translate("MainWindow", "Select the area to analyze:"))
        self.area2Button.setText(_translate("MainWindow", "External region"))
        self.area1Button.setText(_translate("MainWindow", "Internal region"))
        self.label.setText(_translate("MainWindow", "Normalization"))
        self.generateSegButton.setText(_translate("MainWindow", "Generate Segmentation"))
        self.generateNormButton.setText(_translate("MainWindow", "Normalization"))
        self.roiButton.setText(_translate("MainWindow", "Get ROI"))
        self.showButton.setText(_translate("MainWindow", "Show Data"))
        self.loadDataButton.setText(_translate("MainWindow", "Load Data"))
        self.button3D.setText(_translate("MainWindow", "3D Image"))
        self.LoadFolderButton.setText(_translate("MainWindow", "Load Folder"))
        self.label_3.setText(_translate("MainWindow", "Data"))
        self.loadMaskButton.setText(_translate("MainWindow", "Load Mask"))
        self.loadMaskFolderButton.setText(_translate("MainWindow", "Load Mask Folder"))
        self.csvButton.setText(_translate("MainWindow", "Generate CSV"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
